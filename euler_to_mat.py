#!/usr/bin/env python

import sys, math, argparse
import numpy as np

def mat_to_string(mat):
    # NOTE expecting 3x4 mat
    ret  = str(mat[0,0]) + " " + str(mat[0,1]) + " " + str(mat[0,2]) + " " + str(mat[0,3]) + " "
    ret += str(mat[1,0]) + " " + str(mat[1,1]) + " " + str(mat[1,2]) + " " + str(mat[1,3]) + " "
    ret += str(mat[2,0]) + " " + str(mat[2,1]) + " " + str(mat[2,2]) + " " + str(mat[2,3]) + "\n"
    return ret

def euler2mat(arr):
    # NOTE arr holds 6 dof poses: (tx,ty,tz,roll,pitch,yaw)
    def c(x):
        return math.cos(x)
    def s(x):
        return math.sin(x)
    tx = arr[0]; ty = arr[1]; tz = arr[2];
    r  = arr[3]; p  = arr[4]; y  = arr[5];
    # using: http://planning.cs.uiuc.edu/node102.html -> gt_rotation = R_z(yaw)*R_y(pitch)*R_x(roll)
    return np.matrix([[c(y)*c(p), c(y)*s(p)*s(r)-s(y)*c(r), c(y)*s(p)*c(r)+s(y)*s(r), tx],
                      [s(y)*c(p), s(y)*s(p)*s(r)+c(y)*c(r), s(y)*s(p)*c(r)-c(y)*s(r), ty],
                      [-s(p),     c(p)*s(r),                c(p)*c(r),                tz],
                      [0.0,       0.0,                      0.0,                      1.0]])

def main():
    # setup argparser
    argparser = argparse.ArgumentParser(description="Converts recorded euler poses from a CARLA sequence into absolute poses. This can be used for validating the GT poses generated by the CARLA simulator.")
    argparser.add_argument('--poses', '-poses', type=str, help="path to GT euler poses from CARLA sequence")
    args = argparser.parse_args()

    # read in carla poses as numpy matrices
    print("[INFO] parsing euler poses...", end='', flush=True)
    filename = args.poses
    f = open(filename, 'r'); lines = f.readlines(); f.close();
    poses_np = []
    for line in lines:
        l = [float(x.replace('\n', '')) for x in line.split(' ')]
        poses_np.append(euler2mat(np.array(l)))
    print(" done")

    # give status information
    print("[INFO] {} poses have been parsed".format(len(poses_np)))

    # iterate poses and serialize to string
    print("[INFO] converting euler poses to matrix...", end='', flush=True)
    poses_str = mat_to_string(poses_np.pop(0).copy())
    for pose in poses_np:
        poses_str += mat_to_string(pose)
    print(" done")

    # write absolute poses to file
    filename_out = filename.replace('.txt', '_converted.txt')
    print("[INFO] writing matrix poses to file at '{}'...".format(filename_out), end='', flush=True)
    with open(filename_out, 'w') as poses_file:
        poses_file.write(poses_str)
    print(" done")

if __name__ == "__main__":
    main()
